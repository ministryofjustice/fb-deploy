#!/bin/bash
set -e -u -o pipefail

source "$(dirname "$0")/set_k8s_context"

# $1 ECR repo URL
# $2 environment name
# $3 Image tag
# $4 Dockerfile path
build_and_push() {
  echo "*******************************************************************"
  repo_name=${1#*/}
  echo "repo_name is ${repo_name}"
  echo "*******************************************************************"
  echo

  if [[ $repo_name == *fb-runner* ]]; then
    # The fb-runner and fb-runner-node use the latest-test and latest-live tags
    # The other apps make use of the build SHA as the tag
    echo "*******************************************************************"
    echo "Runner app. Building ${repo_name}:latest-$2"
    docker build -t "$1:latest-$2" -f "$4" .
    echo "*******************************************************************"
    echo

    echo "*******************************************************************"
    echo "Pushing image for ${repo_name}:latest-$2"
    docker push "$1:latest-$2"
    echo "*******************************************************************"
    echo
  else
    # Returns a "An error occurred (ImageNotFoundException)" if image doesn't
    # exist and a non zero code
    aws ecr describe-images --repository-name "$repo_name" --image-ids imageTag="$3" >> /dev/null

    if [[ $? == 0 ]]; then
      echo "*******************************************************************"
      echo "Image with $3 already exists in ${repo_name}"
      echo "Not building or pushing a new image"
      echo "*******************************************************************"
      echo
    else
      echo "*******************************************************************"
      echo "Building image for build SHA $3"
      docker build -t "$1:$3" -f "$4" .
      echo "*******************************************************************"
      echo

      echo "*******************************************************************"
      echo "Pushing build SHA $3 image"
      docker push "$1:$3"
      echo "*******************************************************************"
      echo
    fi
  fi
}

k8s_token=$(echo $K8S_TOKEN | base64 -d)
k8s_namespace=formbuilder-repos

ecr_credentials_secret=$ECR_CREDENTIALS_SECRET

echo "*******************************************************************"
environment_name=$ENVIRONMENT_NAME
echo "environment_name is ${environment_name}"
echo "*******************************************************************"
echo

echo "*******************************************************************"
build_SHA=$BUILD_SHA
echo "build_SHA is ${build_SHA}"
echo "*******************************************************************"
echo

echo "*******************************************************************"
branch_name=$CIRCLE_BRANCH
echo "branch_name is ${branch_name}"
echo "*******************************************************************"
echo

set_context "circleci" ${k8s_namespace} ${k8s_token}

echo "*******************************************************************"
echo "Getting ECR credentials"
ecr_username=$(kubectl get secrets -n formbuilder-repos ecr-credentials -o jsonpath="{.data.ecr_username}" | base64 -d)
ecr_password=$(kubectl get secrets -n formbuilder-repos ecr-credentials -o jsonpath="{.data.ecr_password}" | base64 -d)
echo "*******************************************************************"
echo

echo "*******************************************************************"
echo "Finding right ecr repos from ${k8s_namespace}"
ecr_credentials=$(kubectl get secrets -n formbuilder-repos)
echo "*******************************************************************"
echo

for ecr_credential in ${ecr_credentials[@]}; do
  if [[ ${ecr_credential} == *"${ecr_credentials_secret}"* ]]; then
    # Despite this saying it is a secret and/or credential, this is in fact just
    # the name of an ECR repository for an app. Unfortunate naming
    echo "*******************************************************************"
    echo "ECR repo ${ecr_credential} matched"
    ecr_credential_match="${ecr_credentials_secret}-"
    echo "*******************************************************************"
    echo

    echo "*******************************************************************"
    application_type=${ecr_credential#"$ecr_credential_match"}
    echo "Application type is ${application_type}"
    echo "*******************************************************************"
    echo

    # if the ecr name doesn't have a type (e.g ecr-fb-user-datastore-api)
    # then use Dockerfile.
    # But if it has a type (e.g ecr-repo-fb-submitter-worker or
    # ecr-repo-fb-submitter-api) the dockerfile to be build will be
    # located in docker/worker/Dockerfile
    #
    if [[ $application_type == $ecr_credentials_secret ]]; then
      dockerfile="./Dockerfile"
    else
      dockerfile="./docker/${application_type}/Dockerfile"
    fi

    if [[ -f $dockerfile ]]; then
      echo "*******************************************************************"
      echo "Using Dockerfile from ${dockerfile}"
      echo "*******************************************************************"
      echo

      echo "*******************************************************************"
      echo "Getting secrets from AWS"
      export AWS_DEFAULT_REGION=eu-west-2
      export AWS_ACCESS_KEY_ID=$(kubectl get secrets -n formbuilder-repos ${ecr_credential} -o jsonpath='{.data.access_key_id}' | base64 -d)
      export AWS_SECRET_ACCESS_KEY=$(kubectl get secrets -n formbuilder-repos ${ecr_credential} -o jsonpath='{.data.secret_access_key}' | base64 -d)
      export ECR_REPO_URL=$(kubectl get secrets -n formbuilder-repos ${ecr_credential} -o jsonpath='{.data.repo_url}' | base64 -d)
      echo "*******************************************************************"
      echo

      echo "*******************************************************************"
      echo 'Logging into AWS ECR'
      aws ecr get-login-password --region eu-west-2 | docker login --username ${ecr_username} --password-stdin ${ecr_password}
      echo "*******************************************************************"
      echo

      build_and_push ${ECR_REPO_URL} ${environment_name} ${build_SHA}  ${dockerfile}
    else
      echo "*******************************************************************"
      echo "Dockerfile ${dockerfile} not found! :("
      echo "*******************************************************************"
      echo
    fi
  fi
done
