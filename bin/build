#!/bin/bash
set -e -o pipefail

source "$(dirname "$0")/set_k8s_context"

# $1 ECR repo URL
# $2 Image tag
skip_build_and_push() {
  echo "*******************************************************************"
  # Returns a "An error occurred (ImageNotFoundException)" if image doesn't
  # exist and a non zero code
  echo "If there is a 'An error occurred (ImageNotFoundException)' outputted"
  echo "in the logs this is ok as it is a potential expected response from AWS"
  echo "if the an image with $2 tag does NOT exist"
  echo "*******************************************************************"
  echo

  aws ecr describe-images --repository-name "$1" --image-ids imageTag="$2" >> /dev/null
  if [[ $? == 0 ]]; then
    echo "*******************************************************************"
    echo "Image with $2 already exists in $1"
    echo "Not building or pushing a new image"
    echo "*******************************************************************"
    echo
  else
    return 1
  fi
}

# $1 ECR repo URL
# $2 Image tag
# $3 Dockerfile path
build_and_push_sha_image() {
  echo "*******************************************************************"
  echo "Building image for build SHA $2"
  docker build -t "$1:$2" -f "$3" .
  echo "*******************************************************************"
  echo

  echo "*******************************************************************"
  echo "Pushing build SHA $2 image"
  docker push "$1:$2"
  echo "*******************************************************************"
  echo
}

# $1 ECR repo URL
# $2 environment name
# $3 Image tag
# $4 Dockerfile path
build_and_push() {
  echo "*******************************************************************"
  repo_name=${1#*/}
  echo "repo_name is ${repo_name}"
  echo "*******************************************************************"
  echo

  if [[ $repo_name == *fb-runner* ]]; then
    # The fb-runner and fb-runner-node use the latest-test and latest-live tags
    # The other apps make use of the build SHA as the tag
    echo "*******************************************************************"
    echo "Runner app. Building ${repo_name}:latest-$2"
    docker build --no-cache -t "$1:latest-$2" -f "$4" .
    echo "*******************************************************************"
    echo

    echo "*******************************************************************"
    echo "Pushing image for ${repo_name}:latest-$2"
    docker push "$1:latest-$2"
    echo "*******************************************************************"
    echo
  else
    skip_build_and_push $repo_name $3 || build_and_push_sha_image $1 $3 $4
  fi
}

# if env var EKS_TOKEN exists then set otherwise set the token as K8S_TOKEN
if env | grep -q ^EKS_TOKEN=; then
  echo "EKS_TOKEN found. Using EKS_TOKEN env var as a token."
  k8s_token=$(echo $EKS_TOKEN | base64 -d)
else
  echo "EKS_TOKEN not found. Using K8S_TOKEN env var as a token."
  k8s_token=$(echo $K8S_TOKEN | base64 -d)
fi

if env | grep -q ^EKS_CLUSTER_CERT=; then
  echo "EKS_CLUSTER_CERT found. Using EKS_CLUSTER_CERT env var."
  cluster_cert=$EKS_CLUSTER_CERT
else
  echo "EKS_CLUSTER_CERT not found. Using K8S_CLUSTER_CERT env var."
  cluster_cert=$K8S_CLUSTER_CERT
fi

if env | grep -q ^EKS_CLUSTER_NAME=; then
  echo "EKS_CLUSTER_NAME found. Using EKS_CLUSTER_NAME env var."
  cluster_name=$EKS_CLUSTER_NAME
else
  echo "EKS_CLUSTER_NAME not found. Using K8S_CLUSTER_NAME env var."
  cluster_name=$K8S_CLUSTER_NAME
fi

k8s_namespace=formbuilder-repos

ecr_credentials_secret=$ECR_CREDENTIALS_SECRET

echo "*******************************************************************"
environment_name=$ENVIRONMENT_NAME
echo "environment_name is ${environment_name}"
echo "*******************************************************************"
echo

echo "*******************************************************************"
build_SHA=$BUILD_SHA
echo "build_SHA is ${build_SHA}"
echo "*******************************************************************"
echo

echo "*******************************************************************"
branch_name=$CIRCLE_BRANCH
echo "branch_name is ${branch_name}"
echo "*******************************************************************"
echo

set_context "circleci" "${k8s_namespace}" "${k8s_token}" "${cluster_cert}" "${cluster_name}"

# echo "*******************************************************************"
# echo "Getting ECR credentials"
# ecr_username=$(kubectl get secrets -n formbuilder-repos ecr-credentials -o jsonpath="{.data.ecr_username}" | base64 -d)
# ecr_password=$(kubectl get secrets -n formbuilder-repos ecr-credentials -o jsonpath="{.data.ecr_password}" | base64 -d)
# echo "*******************************************************************"
# echo

echo "*******************************************************************"
echo "Finding right ecr repos from ${k8s_namespace}"
ecr_credentials=$(kubectl get secrets -n formbuilder-repos)
echo "*******************************************************************"
echo

top_level_docker_files=("ecr-repo-fb-user-datastore-api" "ecr-repo-fb-user-filestore-api")

for ecr_credential in ${ecr_credentials[@]}; do
  if [[ ${ecr_credential} == *"${ecr_credentials_secret}"* ]]; then
    # Despite this saying it is a secret and/or credential, this is in fact just
    # the name of an ECR repository for an app. Unfortunate naming
    echo "*******************************************************************"
    echo "ECR repo ${ecr_credential} matched"
    ecr_credential_match="${ecr_credentials_secret}-"
    echo "*******************************************************************"
    echo

    echo "*******************************************************************"
    application_type=${ecr_credential#"$ecr_credential_match"}
    echo "Application type is ${application_type}"
    echo "*******************************************************************"
    echo

    # if the ecr name doesn't have a type (e.g ecr-fb-user-datastore-api)
    # then use Dockerfile.
    # But if it has a type (e.g ecr-repo-fb-submitter-worker or
    # ecr-repo-fb-submitter-api) the dockerfile to be build will be
    # located in docker/worker/Dockerfile
    #
    top_level=false
    for str in ${top_level_docker_files[@]}; do
      if [[ $ecr_credentials_secret == $str ]]; then
        echo "*******************************************************************"
        echo "Matched to top level dockerfile, will always resolve to ./Dockerfile"
        echo "*******************************************************************"
        top_level=true
      fi
    done

    if [[ $application_type == $ecr_credentials_secret ]] || [[ $top_level == true ]]; then
      dockerfile="./Dockerfile"
    else
      dockerfile="./docker/${application_type}/Dockerfile"
    fi

    if [[ -f $dockerfile ]]; then
      # continue build if it is an app without a type. i.e it has no workers
      # e.g the datastore or the filestore
      # or
      # continue build if the deployment config injected an image_type into
      # the environment, such as api, web, worker or workers. yes we have both singular and plural :(
      # also the image_type is the same as the application_type found found above
      # otherwise skip the build
      if [[ -z "${IMAGE_TYPE-}" ]] || [[ -n "$IMAGE_TYPE" && "$IMAGE_TYPE" == "$application_type" ]]; then
        echo "*******************************************************************"
        echo "Using Dockerfile from ${dockerfile}"
        echo "*******************************************************************"
        echo
        export AWS_DEFAULT_REGION=$ECR_REGION
        # We used to use long lived creds for this login, we now login in the circle jobs using an orb and output the ~/.aws/config data to $BASH_ENV
        echo "*******************************************************************"
        echo 'Logging into AWS ECR'
        aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com

        export ECR_REPO_URL=${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/${ECR_REPOSITORY}


        # I've had to introduce special cases for each repo that needs to build workers on migrating to OIDC ECR creds in September '23
        # Previously these scripts had an elegant way of determining between workers and API images, but now need to use separate AWS login role arns to access ECR for them
        # This login is done in a separate step in the circle pipeline so had to split build steps into build-api and build-worker
        # We still have the list of secrets in formbuilder-repos for this script to work, but they no longer contain long-lived access keys, they're essentially just a list of our
        # available repositories
        if [[ $ecr_credential == 'ecr-repo-fb-submitter-workers' ]] && [[ $BUILD_WORKER == 'true' ]]; then
          echo "*******************************************************************"
          echo "Building submitter worker"
          echo "*******************************************************************"
          export ECR_REPO_URL=${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/${WORKERS_ECR_REPOSITORY}
          build_and_push ${ECR_REPO_URL} ${environment_name} ${build_SHA}  ${dockerfile}
        fi

        if [[ $ecr_credential == 'ecr-repo-hmcts-complaints-formbuilder-adapter-worker' ]] && [[ $BUILD_WORKER == 'true' ]]; then
          echo "*******************************************************************"
          echo "Building adapter worker"
          echo "*******************************************************************"
          export ECR_REPO_URL=${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/${WORKERS_ECR_REPOSITORY}
          build_and_push ${ECR_REPO_URL} ${environment_name} ${build_SHA}  ${dockerfile}
        fi

        if [[ $ecr_credential != 'ecr-repo-fb-submitter-workers' ]] && [[ $ecr_credential != 'ecr-repo-hmcts-complaints-formbuilder-adapter-worker' ]] && [[ $BUILD_WORKER != 'true' ]]; then
          build_and_push ${ECR_REPO_URL} ${environment_name} ${build_SHA}  ${dockerfile}
        fi
      fi
    else
      echo "*******************************************************************"
      echo "Dockerfile ${dockerfile} not found! :("
      echo "*******************************************************************"
      echo
    fi
  fi
done
