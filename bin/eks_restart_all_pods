#!/bin/bash
set -e -u -o pipefail

source "$(dirname "$0")/set_k8s_context"

k8s_namespace=$K8S_NAMESPACE
platform_environment=$PLATFORM_ENV
deployment_environment=${DEPLOYMENT_ENV}
environment_full_name="${platform_environment}-${deployment_environment}"
credential_name="circleci_${environment_full_name}"

if [[ -z "${RUNNER_TYPE-}" ]]; then
  echo "*******************************************************************"
  echo 'RUNNER_TYPE has not been set. This needs to be either fb-runner or fb-runner-node'
  echo "*******************************************************************"
  echo
  exit 1
fi

runner_type=$RUNNER_TYPE

k8s_environment_name=$(echo ${environment_full_name} | tr '-' '_' | tr [a-z] [A-Z]})
k8s_token_env_var_name="EKS_TOKEN_${k8s_environment_name}"
k8s_token=$(eval "echo \${$k8s_token_env_var_name}" | base64 -d)

set_context "${credential_name}" "${k8s_namespace}" ${k8s_token} "${EKS_CLUSTER_CERT}" "${EKS_CLUSTER_NAME}"

to_deploy=()
deployments=$(kubectl get deployments -n ${k8s_namespace} | awk {'print $1'})
for deployment in ${deployments}; do
  # first column title which we do not want
  if [[ $deployment == 'NAME' ]]; then
    continue
  fi

  image=$(kubectl get deployments ${deployment} -n ${k8s_namespace} -o jsonpath={..'image'})
  if [[ $image == *${runner_type}:latest-${platform_environment}* ]]; then
    echo "*******************************************************************"
    echo "Will restart deployment for ${deployment}"
    to_deploy+=(${deployment})
    echo "*******************************************************************"
    echo
  fi
done

if [ ${#to_deploy[@]} -eq 0 ]; then
  echo "*******************************************************************"
  echo "No deployments found with image containing ${runner_type}"
  echo "*******************************************************************"
  echo
else
  echo "*******************************************************************"
  echo "Rolling out and restarting ${runner_type} pods for ${k8s_namespace}"
  rolled_out=$(kubectl rollout restart deployments -n ${k8s_namespace} ${to_deploy[*]})
  echo "*******************************************************************"
  echo

  echo "*******************************************************************"
  echo "Checking rollout status"
  # The response from kubectl contains the word 'restarted' which rollout status will
  # not recognise, so remove it. There may well be other response keywords that
  # kubectl returns which we can add if needs be. kubectl will not action any deployment
  # it does not recognise and will just log an error
  printf '%s\n' "${rolled_out//restarted/}" | xargs -n1 -t kubectl rollout status -n "${k8s_namespace}"
  echo "*******************************************************************"
  echo

  echo "*******************************************************************"
  echo "Rollout and restart completed"
  echo "*******************************************************************"
  echo
fi
