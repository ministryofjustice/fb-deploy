#!/bin/bash
set -e -u -o pipefail

source "$(dirname "$0")/set_k8s_context"

get_images() {
  kubectl get pods -n "$1" -o jsonpath="{..image}" | tr -s '[[:space:]]' '\n' | sort | uniq
}

## Platform environment: test or live
#
platform_environment=$PLATFORM_ENV

## Deployment environment: dev (draft), production (published)
#
deployment_environment=${DEPLOYMENT_ENV-}

if [ -z "$deployment_environment" ]; then
  environment_full_name="${platform_environment}"
else
  environment_full_name="${platform_environment}-${deployment_environment}"
fi
echo "*******************************************************************"
echo "environment_full_name is ${environment_full_name}"
echo "*******************************************************************"
echo

k8s_environment_name=$(echo ${environment_full_name} | tr '-' '_' | tr [a-z] [A-Z]})
k8s_token_env_var_name="EKS_TOKEN_${k8s_environment_name}"
k8s_token=$(eval "echo \${$k8s_token_env_var_name}" | base64 -d)

echo "*******************************************************************"
build_SHA=$BUILD_SHA
echo "build_SHA is ${build_SHA}"
echo "*******************************************************************"
echo

branch_name=$CIRCLE_BRANCH
echo "*******************************************************************"
echo "branch name is ${branch_name}"
echo "*******************************************************************"
echo

echo "*******************************************************************"
application_name=$APPLICATION_NAME
echo "application_name is ${application_name}"
echo "*******************************************************************"
echo

echo "*******************************************************************"
namespace=$K8S_NAMESPACE
echo "namespace is ${namespace}"
echo "*******************************************************************"
echo

ssh_file_for_secrets=$SSH_FILE_FOR_SECRETS
encoded_git_crypt_key=$ENCODED_GIT_CRYPT_KEY

credential_name="circleci_$(echo ${environment_full_name} | tr '-' '_')"

################################################################
## Begin setting kubernetes context
################################################################

set_context "${credential_name}" "${namespace}" ${k8s_token} "${EKS_CLUSTER_CERT}" "${EKS_CLUSTER_NAME}"

echo "*******************************************************************"
echo "apply kubernetes changes to ${platform_environment} ${deployment_environment}"
echo "*******************************************************************"
echo

helm_command=''

echo "*******************************************************************"
chartname="${application_name}-chart"
echo "chartname is ${chartname}"
echo "*******************************************************************"
echo

echo "*******************************************************************"
config_file="/tmp/${application_name}-${environment_full_name}.yaml"
echo "config_file is ${config_file}"
echo "*******************************************************************"
echo

################################################################
## Begin git crypt
################################################################

if [[ ! -d app-secrets ]]; then
  GIT_SSH_COMMAND="ssh -v -i ${ssh_file_for_secrets} -o \"IdentitiesOnly=yes\"" git clone git@github.com:ministryofjustice/${application_name}-deploy.git app-secrets
  echo ${encoded_git_crypt_key} | base64 -d > app-secrets/git_crypt.key
  cd app-secrets && git-crypt unlock git_crypt.key && cd ..
  pwd
fi

values_config="app-secrets/values/${environment_full_name}-values.yaml"
if [[ -f "$values_config" ]]; then
  helm_command="${helm_command} -f $values_config"
else
  echo "*******************************************************************"
  echo "${values_config} not found. Skipping"
  echo "*******************************************************************"
  echo
fi

shared_config="app-secrets/secrets/shared-secrets-values.yaml"
if [[ -f "$shared_config" ]]; then
  helm_command="${helm_command} -f $shared_config"
else
  echo "*******************************************************************"
  echo "${shared_config} not found. Skipping"
  echo "*******************************************************************"
  echo
fi

secrets_config="app-secrets/secrets/${environment_full_name}-secrets-values.yaml"
if [[ -f "$secrets_config" ]]; then
  helm_command="${helm_command} -f $secrets_config"
else
  echo "*******************************************************************"
  echo "${secrets_config} not found. Skipping"
  echo "*******************************************************************"
  echo
fi

echo "*******************************************************************"
if [[ $branch_name == testable-* ]] && [[ $application_name == 'fb-editor' ]]; then
  # editor_host is an environment variable that is set in the secrets for the fb-editor
  # In order to get authentication to work correctly the editor_host needs to be
  # overridden to include the name of the branch which will become the host
  # Passing editor_host into the helm command will override the editor_host
  # that is set in the secrets for the editor

  editor_host="${branch_name}.apps.live.cloud-platform.service.justice.gov.uk"
  echo "Testable branch. Setting editor_host to ${editor_host}"

  # Also set app_name to be the name of the branch
  echo "Setting app_name to ${branch_name}"

  helm_command="helm template deploy-eks/${chartname} $helm_command --set circleSha1=${build_SHA} \
  --set environmentName=${environment_full_name} --set platformEnv=${platform_environment} \
  --set editor_host=${editor_host} --set app_name=${branch_name}"
else
  echo "Standard deployment branch"

  # Currently only the editor will make use of the environment variable app_name
  # when doing a standard deployment
  # Should another app in the future require testable branches to be built then
  # they can potentially use the same mechanism the editor does
  echo "Setting app_name to ${application_name}"

  helm_command="helm template deploy-eks/${chartname} $helm_command --set circleSha1=${build_SHA} \
  --set environmentName=${environment_full_name} --set platformEnv=${platform_environment} \
  --set app_name=${application_name}"
fi
echo "*******************************************************************"
echo

echo "*******************************************************************"
echo "Full helm command"
echo $helm_command
echo "*******************************************************************"
echo

################################################################
# Begin applying configuration
################################################################

echo "*******************************************************************"
echo "Writing ${environment_full_name} config to $config_file"
$helm_command > $config_file
echo "*******************************************************************"
echo

current_images=$(get_images "${namespace}")

echo "*******************************************************************"
echo "Getting images for ${namespace}"
echo 'Current images:'
echo ${current_images}
echo "*******************************************************************"
echo

echo "*******************************************************************"
echo "Applying configuration"
kubectl apply -f $config_file -n "${namespace}"
echo "*******************************************************************"
echo

################################################################
# Begin rollout and restart
################################################################

deployments=$(kubectl get deployments -n ${namespace})

for current_image in ${current_images}; do
  if [[ $current_image == *$application_name* ]]; then
    image_deployed=false

    echo "*******************************************************************"
    app_image_name=$(echo ${current_image} | awk -F'formbuilder/' '{print $NF}' | cut -f1 -d":")
    echo "app_image_name is ${app_image_name}"
    echo "*******************************************************************"
    echo

    echo "*******************************************************************"
    if [[ $branch_name == testable-* ]] && [[ $application_name == 'fb-editor' ]]; then
      echo "Setting deployment_to_match to ${branch_name}"
      deployment_to_match=$branch_name
    else
      echo "Setting deployment_to_match to ${app_image_name}"
      deployment_to_match=$app_image_name
    fi
    echo "*******************************************************************"
    echo

    for deployment in ${deployments}; do
      if [[ $deployment == *$deployment_to_match* ]]; then
        echo "*******************************************************************"
        echo "matched deployment with ${deployment}"
        echo "*******************************************************************"
        echo

        echo "*******************************************************************"
        current_SHA=${current_image##*:}
        echo "current_SHA is ${current_SHA}"
        echo "*******************************************************************"
        echo

        # If the current SHA and the build SHA are the same then it is a redeployment
        # of the last commit and kubectl apply will not restart the pods.
        # In this instance we need to call rollout restart
        if [[ $current_SHA == $build_SHA ]]; then
          echo "*******************************************************************"
          echo "Current SHA and the build SHA are the same"
          echo "Rolling out and restarting pods for ${deployment}"
          kubectl -n ${namespace} rollout restart deployment ${deployment}
          echo "*******************************************************************"
          echo
        fi

        echo "*******************************************************************"
        echo "Checking rollout status for ${deployment}"
        kubectl -n ${namespace} rollout status deployment ${deployment}
        echo "*******************************************************************"
        echo

        echo "*******************************************************************"
        echo "Checking correct image was deployed with sha: ${build_SHA}"
        new_images=$(get_images "${namespace}")
        echo 'New images:'
        echo ${new_images}
        echo "*******************************************************************"
        echo

        for image in ${new_images}; do
          if [[ $image == *$build_SHA* ]]; then
            echo "*******************************************************************"
            echo "Successfully rolled out and restarted ${deployment} pods in ${namespace}"
            image_deployed=true
            echo "*******************************************************************"
            echo
          fi
        done
      fi
    done

    if [[ "${image_deployed}" = false ]]; then
      echo "*******************************************************************"
      echo "Unable to find image using ${build_SHA}"
      echo "*******************************************************************"
      echo
      exit 1
    fi
  fi
done

echo "*******************************************************************"
echo "Rollout and restart completed"
echo "*******************************************************************"
echo
