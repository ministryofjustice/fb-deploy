#!/usr/bin/env sh
set -e -u -o pipefail

app_name=$1

builder_image_url=$(kubectl get secrets -n formbuilder-repos ecr-repo-fb-builder -o json | jq -r '.data["repo_url"]' | base64 -D)
builder_image_access_key_id=$(kubectl get secrets -n formbuilder-repos ecr-repo-fb-builder -o json | jq -r '.data["access_key_id"]' | base64 -D)
builder_image_secret_access_key=$(kubectl get secrets -n formbuilder-repos ecr-repo-fb-builder -o json | jq -r '.data["secret_access_key"]' | base64 -D)

ecr_repos=$(kubectl get secrets -n formbuilder-repos)

for repo in ${ecr_repos[@]}; do
  if [[ $repo == *"circleci-formbuilder-repos-token"* ]]; then
    circle_secret_name=$repo
  fi
done

cert=$(kubectl get secrets -n formbuilder-repos ${circle_secret_name} -o json |  jq -r '.data["ca.crt"]')
token=$(kubectl get secrets -n formbuilder-repos ${circle_secret_name} -o json |  jq -r '.data["token"]')

echo "Set these environment variables in your CI"
echo
echo "AWS_BUILD_IMAGE_ECR_ACCOUNT_URL=${builder_image_url}:latest"
echo
echo "AWS_BUILD_IMAGE_ACCESS_KEY_ID=${builder_image_access_key_id}"
echo
echo "AWS_BUILD_IMAGE_SECRET_ACCESS_KEY=${builder_image_secret_access_key}"
echo
echo "EKS_CLUSTER_NAME=DF366E49809688A3B16EEC29707D8C09.gr7.eu-west-2.eks.amazonaws.com"
echo
echo "EKS_CLUSTER_CERT=${cert}"
echo
echo "EKS_TOKEN=${token}"
echo

ecr_credentials_secret="ecr-repo-${app_name}"

if [[ ${ecr_repos[@]} =~ ${ecr_credentials_secret} ]]; then
  echo "ECR_CREDENTIALS_SECRET=${ecr_credentials_secret}"
else
  echo "${ecr_credentials_secret} does not exist in repo list:"
  echo $(kubectl get secrets -n formbuilder-repos -o json | jq '.items[] | .metadata["name"]')
fi

own_namespaces=()
formbuilder_namespaces=$(kubectl get namespaces | grep formbuilder)
app_namespace=$(echo ${app_name} | sed -e 's/fb/formbuilder/g')
for formbuilder_namespace in ${formbuilder_namespaces}; do
  if [[ $formbuilder_namespace == *"${app_namespace}"* ]]; then
    own_namespaces+=("${formbuilder_namespace}")
  fi
done

if [[ $app_name == 'fb-runner-node' ]] || [[ $app_name == 'fb-runner' ]]; then
  namespaces=('test-dev' 'test-production' 'live-dev' 'live-production')
  echo
  echo "==========================================="
  echo "| EKS_TOKEN for all service environments  |"
  echo "==========================================="
  echo
  for namespace in ${namespaces[@]}; do
    secrets=$(kubectl get secrets -n formbuilder-services-${namespace})

    for secret in ${secrets[@]}; do
      if [[ $secret == *"circleci-formbuilder-services-${namespace}"* ]]; then
        k8s_namespace_token=$(kubectl get secrets -n formbuilder-services-${namespace} ${secret} -o jsonpath="{.data.token}")
        formatted_namespace=$(echo ${namespace} | tr '-' '_' | tr [a-z] [A-Z])
        echo
        echo "EKS_TOKEN_${formatted_namespace}=${k8s_namespace_token}"
      fi
    done
  done
elif [[ $app_name == 'fb-metadata-api' ]] || [[ $app_name == 'fb-editor' ]]; then
  echo
  echo "==========================================="
  echo "| EKS_TOKEN for fb-saas environments |"
  echo "==========================================="
  echo

  namespaces=('test' 'live')

  for namespace in ${namespaces[@]}; do
    secrets=$(kubectl get secrets -n formbuilder-saas-${namespace})

    for secret in ${secrets[@]}; do
      if [[ $secret == *"circleci-formbuilder-saas-${namespace}"* ]]; then
        k8s_namespace_token=$(kubectl get secrets -n formbuilder-saas-${namespace} ${secret} -o jsonpath="{.data.token}")
        formatted_namespace=$(echo ${namespace} | tr [a-z] [A-Z])
        echo
        echo "EKS_TOKEN_${formatted_namespace}=${k8s_namespace_token}"
      fi
    done
  done
elif [[ ${#own_namespaces[@]} -eq 0 ]]; then
  echo
  echo "==========================================="
  echo "| EKS_TOKEN for all platform environments |"
  echo "==========================================="
  echo

  namespaces=('test-dev' 'test-production' 'live-dev' 'live-production')

  for namespace in ${namespaces[@]}; do
    secrets=$(kubectl get secrets -n formbuilder-platform-${namespace})

    for secret in ${secrets[@]}; do
      if [[ $secret == *"circleci-formbuilder-platform-${namespace}"* ]]; then
        k8s_namespace_token=$(kubectl get secrets -n formbuilder-platform-${namespace} ${secret} -o jsonpath="{.data.token}")
        formatted_namespace=$(echo ${namespace} | tr '-' '_' | tr [a-z] [A-Z])
        echo
        echo "EKS_TOKEN_${formatted_namespace}=${k8s_namespace_token}"
      fi
    done
  done
else
  echo
  echo "==========================================="
  echo "| EKS_TOKEN for all environments |"
  echo "==========================================="
  echo

  for own_namespace in ${own_namespaces[@]}; do
    secrets=$(kubectl get secrets -n ${own_namespace})

    for secret in ${secrets[@]}; do
      if [[ $secret == *"circleci"* ]]; then
        k8s_namespace_token=$(kubectl get secrets -n ${own_namespace} ${secret} -o jsonpath="{.data.token}")
        formatted_namespace=$(echo ${own_namespace##*-} | tr [a-z] [A-Z])
        echo
        echo "EKS_TOKEN_${formatted_namespace}=${k8s_namespace_token}"
      fi
    done
  done
fi

if [[ $app_name == 'fb-service-token-cache' ]] || [[ $app_name == 'fb-editor' ]] || [[ $app_name == 'fb-publisher' ]]; then
  echo
  echo "==========================================="
  echo "| EKS_BEARER_TOKEN for all environments |"
  echo "==========================================="
  echo

  if [[ $app_name == 'fb-service-token-cache' ]]; then
    namespaces=('test-dev' 'test-production' 'live-dev' 'live-production')
  else
    namespaces=('test' 'live')
  fi

  if [[ $app_name == 'fb-service-token-cache' ]]; then
    namespace_type=platform
  elif [[ $app_name == 'fb-publisher' ]]; then
    namespace_type=publisher
  else
    namespace_type=saas
  fi

  for namespace in ${namespaces[@]}; do
    secrets=$(kubectl get secrets -n formbuilder-${namespace_type}-${namespace})

    updated_app_name=$(echo "${app_name/fb/formbuilder}")
    for secret in ${secrets[@]}; do
      if [[ $secret == *"${updated_app_name}"* ]] && [[ $secret == *"${namespace}-token"* ]]; then
        formatted_namespace=$(echo ${namespace} | tr '-' '_' | tr [a-z] [A-Z])
        echo
        echo "EKS_BEARER_TOKEN_${formatted_namespace}=${secret}"
      fi
    done
  done
fi

echo
echo "SSH_FILE_FOR_SECRETS is used for cloning the git crypt secrets repository and clone."
echo "SSH_FILE_FOR_SECRETS='You need to add fingerprints to Github and then add as env var in the CI config file'"
echo "CircleCI docs: https://circleci.com/docs/2.0/add-ssh-key/"
echo "Github docs: https://circleci.com/docs/2.0/gh-bb-integration/#creating-a-github-deploy-key"
echo

echo "ENCODED_GIT_CRYPT_KEY needs to be exported from the app specific secrets repo. Follow the instructions found in the Runbook"

echo
echo "For repos that require acceptance tests:"

client_id=$(kubectl get secrets -n formbuilder-repos google-credentials -o json | jq -r '.data["client_id"]' | base64 -D)
client_secret=$(kubectl get secrets -n formbuilder-repos google-credentials -o json | jq -r '.data["client_secret"]' | base64 -D)
refresh_token=$(kubectl get secrets -n formbuilder-repos google-credentials -o json | jq -r '.data["refresh_token"]' | base64 -D)
acceptance_tests_private_key=$(kubectl get configmaps -n formbuilder-saas-test fb-acceptance-tests-config-map -o json | jq -r '.data["ENCODED_PRIVATE_KEY"]')
echo "GOOGLE_CLIENT_ID=${client_id}"
echo "GOOGLE_CLIENT_SECRET=${client_secret}"
echo "GOOGLE_REFRESH_TOKEN=${refresh_token}"
echo "ACCEPTANCE_TESTS_PRIVATE_KEY=${acceptance_tests_private_key}"
echo

slack_webhook=$(kubectl get secrets -n formbuilder-repos slack-webhooks -o json | jq -r '.data["deployments"]' | base64 -D)
echo "SLACK_WEBHOOK=${slack_webhook}"
echo

smoke_test_user=$(kubectl get secrets -n formbuilder-repos smoke-test-form -o jsonpath={.data.smoke_test_user} | base64 -D)
smoke_test_password=$(kubectl get secrets -n formbuilder-repos smoke-test-form -o jsonpath={.data.smoke_test_password} | base64 -D)
echo "SMOKE_TEST_USER=${smoke_test_user}"
echo "SMOKE_TEST_PASSWORD=${smoke_test_password}"
echo
echo

new_runner_acceptance_test_user=$(kubectl get secrets -n formbuilder-repos new-runner-app -o jsonpath={.data.new_runner_acceptance_test_user} | base64 -D)
new_runner_acceptance_test_password=$(kubectl get secrets -n formbuilder-repos new-runner-app -o jsonpath={.data.new_runner_acceptance_test_password} | base64 -D)
echo "NEW_RUNNER_ACCEPTANCE_TEST_USER=${new_runner_acceptance_test_user}"
echo "NEW_RUNNER_ACCEPTANCE_TEST_PASSWORD=${new_runner_acceptance_test_password}"
echo
echo
